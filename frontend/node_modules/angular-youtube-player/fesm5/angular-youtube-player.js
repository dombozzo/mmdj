import { Injectable, ɵɵdefineInjectable, ɵɵinject, EventEmitter, Component, Input, Output, NgModule } from '@angular/core';
import { BehaviorSubject } from 'rxjs';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var YTPlayerConfig = /** @class */ (function () {
    function YTPlayerConfig(shouldLoadAPI, multiplePlaying) {
        if (shouldLoadAPI === void 0) { shouldLoadAPI = YTPlayerConfig.defaultConfig.shouldLoadAPI; }
        if (multiplePlaying === void 0) { multiplePlaying = YTPlayerConfig.defaultConfig.multiplePlaying; }
        this.shouldLoadAPI = shouldLoadAPI;
        this.multiplePlaying = multiplePlaying;
    }
    YTPlayerConfig.defaultConfig = { shouldLoadAPI: true, multiplePlaying: false };
    return YTPlayerConfig;
}());
if (false) {
    /** @type {?} */
    YTPlayerConfig.defaultConfig;
    /** @type {?} */
    YTPlayerConfig.prototype.shouldLoadAPI;
    /** @type {?} */
    YTPlayerConfig.prototype.multiplePlaying;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} string
 * @return {?}
 */
function parseQueryString(string) {
    if (/(?:[\w_]+=(?:[\w\d]+|\d)&?)+/.test(string)) {
        /** @type {?} */
        var parsed_1 = {};
        string.split('&').forEach((/**
         * @param {?} query
         * @return {?}
         */
        function (query) {
            /** @type {?} */
            var pair = query.split('=');
            parsed_1[pair[0]] = pair[1];
        }));
        return parsed_1;
    }
    else {
        throw new Error('Bad string format, please refer to https://developers.google.com/youtube/player_parameters');
    }
}
/**
 * @return {?}
 */
function loadAPI() {
    return new Promise((/**
     * @param {?} resolve
     * @return {?}
     */
    function (resolve) {
        window['onYouTubeIframeAPIReady'] = resolve;
        /** @type {?} */
        var tag = window.document.createElement('script');
        tag.src = 'https://www.youtube.com/iframe_api';
        /** @type {?} */
        var firstScriptTag = window.document.getElementsByTagName('script')[0];
        firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
    }));
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var YTPlayerService = /** @class */ (function () {
    function YTPlayerService(config) {
        var _this = this;
        this.config = config;
        this.apiReady = new BehaviorSubject(window['YT'] !== undefined);
        this.players = new Array();
        this.multiplePlaying = config.multiplePlaying;
        if (config.shouldLoadAPI !== false) {
            loadAPI().then((/**
             * @return {?}
             */
            function () { return _this.apiReady.next(true); }));
        }
        else if (this.apiReady.value === false) {
            console.warn('YT API not loaded');
        }
    }
    Object.defineProperty(YTPlayerService.prototype, "playersCount", {
        get: /**
         * @return {?}
         */
        function () {
            return this.players.length;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} player
     * @return {?}
     */
    YTPlayerService.prototype.addPlayer = /**
     * @param {?} player
     * @return {?}
     */
    function (player) {
        this.players.push(player);
    };
    /**
     * @param {?} player
     * @return {?}
     */
    YTPlayerService.prototype.removePlayer = /**
     * @param {?} player
     * @return {?}
     */
    function (player) {
        /** @type {?} */
        var index = this.players.indexOf(player);
        this.players.splice(index, 1);
    };
    /**
     * @param {?} playerComponent
     * @return {?}
     */
    YTPlayerService.prototype.pauseAllExcept = /**
     * @param {?} playerComponent
     * @return {?}
     */
    function (playerComponent) {
        if (this.multiplePlaying) {
            return;
        }
        /** @type {?} */
        var exception = this.players.indexOf(playerComponent);
        if (exception > -1) {
            this.players.forEach((/**
             * @param {?} player
             * @param {?} index
             * @return {?}
             */
            function (player, index) {
                if (exception !== index) {
                    player.pause();
                }
            }));
        }
    };
    YTPlayerService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    YTPlayerService.ctorParameters = function () { return [
        { type: YTPlayerConfig }
    ]; };
    /** @nocollapse */ YTPlayerService.ngInjectableDef = ɵɵdefineInjectable({ factory: function YTPlayerService_Factory() { return new YTPlayerService(ɵɵinject(YTPlayerConfig)); }, token: YTPlayerService, providedIn: "root" });
    return YTPlayerService;
}());
if (false) {
    /** @type {?} */
    YTPlayerService.prototype.apiReady;
    /**
     * @type {?}
     * @private
     */
    YTPlayerService.prototype.players;
    /**
     * @type {?}
     * @private
     */
    YTPlayerService.prototype.multiplePlaying;
    /**
     * @type {?}
     * @private
     */
    YTPlayerService.prototype.config;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var YTPlayerComponent = /** @class */ (function () {
    function YTPlayerComponent(ytPlayerService) {
        this.ytPlayerService = ytPlayerService;
        this.ready = new EventEmitter();
        this.unstarted = new EventEmitter();
        this.ended = new EventEmitter();
        this.playing = new EventEmitter();
        this.paused = new EventEmitter();
        this.buffering = new EventEmitter();
        this.cued = new EventEmitter();
    }
    Object.defineProperty(YTPlayerComponent.prototype, "currentTime", {
        get: /**
         * @return {?}
         */
        function () {
            return this.player.getCurrentTime();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    YTPlayerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.ytPlayerService.addPlayer(this);
        this.domId = this.domId || this.videoId || 'ng-yt-player-' + this.ytPlayerService.playersCount;
    };
    /**
     * @return {?}
     */
    YTPlayerComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.ytPlayerService.apiReady.subscribe((/**
         * @param {?} ready
         * @return {?}
         */
        function (ready) {
            if (ready && !_this.player) {
                /** @type {?} */
                var parameters = typeof _this.parameters === 'string' ? parseQueryString(_this.parameters) : _this.parameters;
                _this.player = _this.initPlayer(_this.videoId, parameters, _this.domId);
            }
        }));
    };
    /**
     * @return {?}
     */
    YTPlayerComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.ytPlayerService.removePlayer(this);
    };
    /**
     * @return {?}
     */
    YTPlayerComponent.prototype.play = /**
     * @return {?}
     */
    function () {
        if (this.isReady) {
            this.player.playVideo();
        }
        else {
            console.warn('The player was not ready when tried to play.');
        }
    };
    /**
     * @return {?}
     */
    YTPlayerComponent.prototype.pause = /**
     * @return {?}
     */
    function () {
        if (this.isReady) {
            this.player.pauseVideo();
        }
        else {
            console.warn('The player was not ready when tried to pause.');
        }
    };
    /**
     * @param {?} videoId
     * @param {?=} startSeconds
     * @return {?}
     */
    YTPlayerComponent.prototype.cueVideoById = /**
     * @param {?} videoId
     * @param {?=} startSeconds
     * @return {?}
     */
    function (videoId, startSeconds) {
        if (this.isReady) {
            this.player.cueVideoById(videoId, startSeconds);
        }
        else {
            console.warn('The player was not ready when tried to cueVideoById.');
        }
    };
    /**
     * @param {?} videoId
     * @param {?=} startSeconds
     * @return {?}
     */
    YTPlayerComponent.prototype.loadVideoById = /**
     * @param {?} videoId
     * @param {?=} startSeconds
     * @return {?}
     */
    function (videoId, startSeconds) {
        if (this.isReady) {
            this.player.loadVideoById(videoId, startSeconds);
        }
        else {
            console.warn('The player was not ready when tried to loadVideoById.');
        }
    };
    /**
     * @private
     * @return {?}
     */
    YTPlayerComponent.prototype.onplay = /**
     * @private
     * @return {?}
     */
    function () {
        this.playing.emit();
        this.ytPlayerService.pauseAllExcept(this);
    };
    /**
     * @private
     * @param {?} videoId
     * @param {?} playerVars
     * @param {?} domId
     * @return {?}
     */
    YTPlayerComponent.prototype.initPlayer = /**
     * @private
     * @param {?} videoId
     * @param {?} playerVars
     * @param {?} domId
     * @return {?}
     */
    function (videoId, playerVars, domId) {
        var _this = this;
        /** @type {?} */
        var onReady = (/**
         * @return {?}
         */
        function () {
            if (!_this.isReady) {
                _this.ready.emit();
                _this.isReady = true;
            }
        });
        /** @type {?} */
        var onStateChange = (/**
         * @param {?} __0
         * @return {?}
         */
        function (_a) {
            var data = _a.data;
            switch (data) {
                case -1 /* UNSTARTED */:
                    _this.unstarted.emit();
                    break;
                case 0 /* ENDED */:
                    _this.ended.emit();
                    break;
                case 1 /* PLAYING */:
                    _this.onplay();
                    break;
                case 2 /* PAUSED */:
                    _this.paused.emit();
                    break;
                case 3 /* BUFFERING */:
                    _this.buffering.emit();
                    break;
                case 5 /* CUED */:
                    _this.cued.emit();
                    break;
            }
        });
        return new YT.Player(domId, {
            videoId: videoId,
            playerVars: playerVars,
            events: { onReady: onReady, onStateChange: onStateChange }
        });
    };
    YTPlayerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-ytplayer',
                    template: '<div [id]="domId"></div>',
                    styles: [':host, :host ::ng-deep iframe { display: block; width: 100%; height: 100%; }']
                }] }
    ];
    /** @nocollapse */
    YTPlayerComponent.ctorParameters = function () { return [
        { type: YTPlayerService }
    ]; };
    YTPlayerComponent.propDecorators = {
        videoId: [{ type: Input }],
        domId: [{ type: Input }],
        parameters: [{ type: Input }],
        ready: [{ type: Output }],
        unstarted: [{ type: Output }],
        ended: [{ type: Output }],
        playing: [{ type: Output }],
        paused: [{ type: Output }],
        buffering: [{ type: Output }],
        cued: [{ type: Output }]
    };
    return YTPlayerComponent;
}());
if (false) {
    /** @type {?} */
    YTPlayerComponent.prototype.videoId;
    /** @type {?} */
    YTPlayerComponent.prototype.domId;
    /** @type {?} */
    YTPlayerComponent.prototype.parameters;
    /** @type {?} */
    YTPlayerComponent.prototype.ready;
    /** @type {?} */
    YTPlayerComponent.prototype.unstarted;
    /** @type {?} */
    YTPlayerComponent.prototype.ended;
    /** @type {?} */
    YTPlayerComponent.prototype.playing;
    /** @type {?} */
    YTPlayerComponent.prototype.paused;
    /** @type {?} */
    YTPlayerComponent.prototype.buffering;
    /** @type {?} */
    YTPlayerComponent.prototype.cued;
    /**
     * @type {?}
     * @private
     */
    YTPlayerComponent.prototype.player;
    /**
     * @type {?}
     * @private
     */
    YTPlayerComponent.prototype.isReady;
    /**
     * @type {?}
     * @private
     */
    YTPlayerComponent.prototype.ytPlayerService;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ɵ0 = YTPlayerConfig.defaultConfig;
var YTPlayerModule = /** @class */ (function () {
    function YTPlayerModule() {
    }
    YTPlayerModule.decorators = [
        { type: NgModule, args: [{
                    imports: [],
                    declarations: [YTPlayerComponent],
                    providers: [{ provide: YTPlayerConfig, useValue: ɵ0 }],
                    exports: [YTPlayerComponent]
                },] }
    ];
    return YTPlayerModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { YTPlayerComponent, YTPlayerConfig, YTPlayerModule, YTPlayerService, loadAPI };
//# sourceMappingURL=angular-youtube-player.js.map
