/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/// <reference types="youtube"/>
/// <reference types="youtube"/>
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { YTPlayerService } from './ytplayer.service';
import { parseQueryString } from './util';
export class YTPlayerComponent {
    /**
     * @param {?} ytPlayerService
     */
    constructor(ytPlayerService) {
        this.ytPlayerService = ytPlayerService;
        this.ready = new EventEmitter();
        this.unstarted = new EventEmitter();
        this.ended = new EventEmitter();
        this.playing = new EventEmitter();
        this.paused = new EventEmitter();
        this.buffering = new EventEmitter();
        this.cued = new EventEmitter();
    }
    /**
     * @return {?}
     */
    get currentTime() {
        return this.player.getCurrentTime();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.ytPlayerService.addPlayer(this);
        this.domId = this.domId || this.videoId || 'ng-yt-player-' + this.ytPlayerService.playersCount;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.ytPlayerService.apiReady.subscribe((/**
         * @param {?} ready
         * @return {?}
         */
        ready => {
            if (ready && !this.player) {
                /** @type {?} */
                const parameters = typeof this.parameters === 'string' ? parseQueryString(this.parameters) : this.parameters;
                this.player = this.initPlayer(this.videoId, parameters, this.domId);
            }
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.ytPlayerService.removePlayer(this);
    }
    /**
     * @return {?}
     */
    play() {
        if (this.isReady) {
            this.player.playVideo();
        }
        else {
            console.warn('The player was not ready when tried to play.');
        }
    }
    /**
     * @return {?}
     */
    pause() {
        if (this.isReady) {
            this.player.pauseVideo();
        }
        else {
            console.warn('The player was not ready when tried to pause.');
        }
    }
    /**
     * @param {?} videoId
     * @param {?=} startSeconds
     * @return {?}
     */
    cueVideoById(videoId, startSeconds) {
        if (this.isReady) {
            this.player.cueVideoById(videoId, startSeconds);
        }
        else {
            console.warn('The player was not ready when tried to cueVideoById.');
        }
    }
    /**
     * @param {?} videoId
     * @param {?=} startSeconds
     * @return {?}
     */
    loadVideoById(videoId, startSeconds) {
        if (this.isReady) {
            this.player.loadVideoById(videoId, startSeconds);
        }
        else {
            console.warn('The player was not ready when tried to loadVideoById.');
        }
    }
    /**
     * @private
     * @return {?}
     */
    onplay() {
        this.playing.emit();
        this.ytPlayerService.pauseAllExcept(this);
    }
    /**
     * @private
     * @param {?} videoId
     * @param {?} playerVars
     * @param {?} domId
     * @return {?}
     */
    initPlayer(videoId, playerVars, domId) {
        /** @type {?} */
        const onReady = (/**
         * @return {?}
         */
        () => {
            if (!this.isReady) {
                this.ready.emit();
                this.isReady = true;
            }
        });
        /** @type {?} */
        const onStateChange = (/**
         * @param {?} __0
         * @return {?}
         */
        ({ data }) => {
            switch (data) {
                case -1 /* UNSTARTED */:
                    this.unstarted.emit();
                    break;
                case 0 /* ENDED */:
                    this.ended.emit();
                    break;
                case 1 /* PLAYING */:
                    this.onplay();
                    break;
                case 2 /* PAUSED */:
                    this.paused.emit();
                    break;
                case 3 /* BUFFERING */:
                    this.buffering.emit();
                    break;
                case 5 /* CUED */:
                    this.cued.emit();
                    break;
            }
        });
        return new YT.Player(domId, {
            videoId,
            playerVars,
            events: { onReady, onStateChange }
        });
    }
}
YTPlayerComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-ytplayer',
                template: '<div [id]="domId"></div>',
                styles: [':host, :host ::ng-deep iframe { display: block; width: 100%; height: 100%; }']
            }] }
];
/** @nocollapse */
YTPlayerComponent.ctorParameters = () => [
    { type: YTPlayerService }
];
YTPlayerComponent.propDecorators = {
    videoId: [{ type: Input }],
    domId: [{ type: Input }],
    parameters: [{ type: Input }],
    ready: [{ type: Output }],
    unstarted: [{ type: Output }],
    ended: [{ type: Output }],
    playing: [{ type: Output }],
    paused: [{ type: Output }],
    buffering: [{ type: Output }],
    cued: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    YTPlayerComponent.prototype.videoId;
    /** @type {?} */
    YTPlayerComponent.prototype.domId;
    /** @type {?} */
    YTPlayerComponent.prototype.parameters;
    /** @type {?} */
    YTPlayerComponent.prototype.ready;
    /** @type {?} */
    YTPlayerComponent.prototype.unstarted;
    /** @type {?} */
    YTPlayerComponent.prototype.ended;
    /** @type {?} */
    YTPlayerComponent.prototype.playing;
    /** @type {?} */
    YTPlayerComponent.prototype.paused;
    /** @type {?} */
    YTPlayerComponent.prototype.buffering;
    /** @type {?} */
    YTPlayerComponent.prototype.cued;
    /**
     * @type {?}
     * @private
     */
    YTPlayerComponent.prototype.player;
    /**
     * @type {?}
     * @private
     */
    YTPlayerComponent.prototype.isReady;
    /**
     * @type {?}
     * @private
     */
    YTPlayerComponent.prototype.ytPlayerService;
}
//# sourceMappingURL=data:application/json;base64,