/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { YTPlayerConfig } from './ytplayer.config';
import { loadAPI } from './util';
import * as i0 from "@angular/core";
import * as i1 from "./ytplayer.config";
export class YTPlayerService {
    /**
     * @param {?} config
     */
    constructor(config) {
        this.config = config;
        this.apiReady = new BehaviorSubject(window['YT'] !== undefined);
        this.players = new Array();
        this.multiplePlaying = config.multiplePlaying;
        if (config.shouldLoadAPI !== false) {
            loadAPI().then((/**
             * @return {?}
             */
            () => this.apiReady.next(true)));
        }
        else if (this.apiReady.value === false) {
            console.warn('YT API not loaded');
        }
    }
    /**
     * @return {?}
     */
    get playersCount() {
        return this.players.length;
    }
    /**
     * @param {?} player
     * @return {?}
     */
    addPlayer(player) {
        this.players.push(player);
    }
    /**
     * @param {?} player
     * @return {?}
     */
    removePlayer(player) {
        /** @type {?} */
        const index = this.players.indexOf(player);
        this.players.splice(index, 1);
    }
    /**
     * @param {?} playerComponent
     * @return {?}
     */
    pauseAllExcept(playerComponent) {
        if (this.multiplePlaying) {
            return;
        }
        /** @type {?} */
        const exception = this.players.indexOf(playerComponent);
        if (exception > -1) {
            this.players.forEach((/**
             * @param {?} player
             * @param {?} index
             * @return {?}
             */
            (player, index) => {
                if (exception !== index) {
                    player.pause();
                }
            }));
        }
    }
}
YTPlayerService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
YTPlayerService.ctorParameters = () => [
    { type: YTPlayerConfig }
];
/** @nocollapse */ YTPlayerService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function YTPlayerService_Factory() { return new YTPlayerService(i0.ɵɵinject(i1.YTPlayerConfig)); }, token: YTPlayerService, providedIn: "root" });
if (false) {
    /** @type {?} */
    YTPlayerService.prototype.apiReady;
    /**
     * @type {?}
     * @private
     */
    YTPlayerService.prototype.players;
    /**
     * @type {?}
     * @private
     */
    YTPlayerService.prototype.multiplePlaying;
    /**
     * @type {?}
     * @private
     */
    YTPlayerService.prototype.config;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieXRwbGF5ZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXIteW91dHViZS1wbGF5ZXIvIiwic291cmNlcyI6WyJsaWIveXRwbGF5ZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBVSxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBR3ZDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNuRCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sUUFBUSxDQUFDOzs7QUFLakMsTUFBTSxPQUFPLGVBQWU7Ozs7SUFVMUIsWUFBb0IsTUFBc0I7UUFBdEIsV0FBTSxHQUFOLE1BQU0sQ0FBZ0I7UUFMbkMsYUFBUSxHQUFHLElBQUksZUFBZSxDQUFVLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxTQUFTLENBQUMsQ0FBQztRQUVuRSxZQUFPLEdBQUcsSUFBSSxLQUFLLEVBQXFCLENBQUM7UUFJL0MsSUFBSSxDQUFDLGVBQWUsR0FBRyxNQUFNLENBQUMsZUFBZSxDQUFDO1FBRTlDLElBQUksTUFBTSxDQUFDLGFBQWEsS0FBSyxLQUFLLEVBQUU7WUFDbEMsT0FBTyxFQUFFLENBQUMsSUFBSTs7O1lBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUMsQ0FBQztTQUNoRDthQUFNLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEtBQUssS0FBSyxFQUFFO1lBQ3hDLE9BQU8sQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQztTQUNuQztJQUNILENBQUM7Ozs7SUFqQkQsSUFBVyxZQUFZO1FBQ3JCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUM7SUFDN0IsQ0FBQzs7Ozs7SUFpQk0sU0FBUyxDQUFDLE1BQXlCO1FBQ3hDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzVCLENBQUM7Ozs7O0lBRU0sWUFBWSxDQUFDLE1BQXlCOztjQUNyQyxLQUFLLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDO1FBQzFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNoQyxDQUFDOzs7OztJQUVNLGNBQWMsQ0FBQyxlQUFrQztRQUN0RCxJQUFJLElBQUksQ0FBQyxlQUFlLEVBQUU7WUFDeEIsT0FBTztTQUNSOztjQUVLLFNBQVMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUM7UUFDdkQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDLEVBQUU7WUFDbEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPOzs7OztZQUFDLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxFQUFFO2dCQUNyQyxJQUFJLFNBQVMsS0FBSyxLQUFLLEVBQUU7b0JBQ3ZCLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQztpQkFDaEI7WUFDSCxDQUFDLEVBQUMsQ0FBQztTQUNKO0lBQ0gsQ0FBQzs7O1lBN0NGLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQjs7OztZQUxRLGNBQWM7Ozs7O0lBV3JCLG1DQUEyRTs7Ozs7SUFFM0Usa0NBQWlEOzs7OztJQUNqRCwwQ0FBaUM7Ozs7O0lBRXJCLGlDQUE4QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7IFlUUGxheWVyQ29tcG9uZW50IH0gZnJvbSAnLi95dHBsYXllci5jb21wb25lbnQnO1xuaW1wb3J0IHsgWVRQbGF5ZXJDb25maWcgfSBmcm9tICcuL3l0cGxheWVyLmNvbmZpZyc7XG5pbXBvcnQgeyBsb2FkQVBJIH0gZnJvbSAnLi91dGlsJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgWVRQbGF5ZXJTZXJ2aWNlIHtcbiAgcHVibGljIGdldCBwbGF5ZXJzQ291bnQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5wbGF5ZXJzLmxlbmd0aDtcbiAgfVxuXG4gIHB1YmxpYyBhcGlSZWFkeSA9IG5ldyBCZWhhdmlvclN1YmplY3Q8Ym9vbGVhbj4od2luZG93WydZVCddICE9PSB1bmRlZmluZWQpO1xuXG4gIHByaXZhdGUgcGxheWVycyA9IG5ldyBBcnJheTxZVFBsYXllckNvbXBvbmVudD4oKTtcbiAgcHJpdmF0ZSBtdWx0aXBsZVBsYXlpbmc6IGJvb2xlYW47XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBjb25maWc6IFlUUGxheWVyQ29uZmlnKSB7XG4gICAgdGhpcy5tdWx0aXBsZVBsYXlpbmcgPSBjb25maWcubXVsdGlwbGVQbGF5aW5nO1xuXG4gICAgaWYgKGNvbmZpZy5zaG91bGRMb2FkQVBJICE9PSBmYWxzZSkge1xuICAgICAgbG9hZEFQSSgpLnRoZW4oKCkgPT4gdGhpcy5hcGlSZWFkeS5uZXh0KHRydWUpKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuYXBpUmVhZHkudmFsdWUgPT09IGZhbHNlKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ1lUIEFQSSBub3QgbG9hZGVkJyk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGFkZFBsYXllcihwbGF5ZXI6IFlUUGxheWVyQ29tcG9uZW50KSB7XG4gICAgdGhpcy5wbGF5ZXJzLnB1c2gocGxheWVyKTtcbiAgfVxuXG4gIHB1YmxpYyByZW1vdmVQbGF5ZXIocGxheWVyOiBZVFBsYXllckNvbXBvbmVudCkge1xuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5wbGF5ZXJzLmluZGV4T2YocGxheWVyKTtcbiAgICB0aGlzLnBsYXllcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgfVxuXG4gIHB1YmxpYyBwYXVzZUFsbEV4Y2VwdChwbGF5ZXJDb21wb25lbnQ6IFlUUGxheWVyQ29tcG9uZW50KSB7XG4gICAgaWYgKHRoaXMubXVsdGlwbGVQbGF5aW5nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgZXhjZXB0aW9uID0gdGhpcy5wbGF5ZXJzLmluZGV4T2YocGxheWVyQ29tcG9uZW50KTtcbiAgICBpZiAoZXhjZXB0aW9uID4gLTEpIHtcbiAgICAgIHRoaXMucGxheWVycy5mb3JFYWNoKChwbGF5ZXIsIGluZGV4KSA9PiB7XG4gICAgICAgIGlmIChleGNlcHRpb24gIT09IGluZGV4KSB7XG4gICAgICAgICAgcGxheWVyLnBhdXNlKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufVxuIl19