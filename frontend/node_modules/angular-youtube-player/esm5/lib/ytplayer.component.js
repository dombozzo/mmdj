/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/// <reference types="youtube"/>
/// <reference types="youtube"/>
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { YTPlayerService } from './ytplayer.service';
import { parseQueryString } from './util';
var YTPlayerComponent = /** @class */ (function () {
    function YTPlayerComponent(ytPlayerService) {
        this.ytPlayerService = ytPlayerService;
        this.ready = new EventEmitter();
        this.unstarted = new EventEmitter();
        this.ended = new EventEmitter();
        this.playing = new EventEmitter();
        this.paused = new EventEmitter();
        this.buffering = new EventEmitter();
        this.cued = new EventEmitter();
    }
    Object.defineProperty(YTPlayerComponent.prototype, "currentTime", {
        get: /**
         * @return {?}
         */
        function () {
            return this.player.getCurrentTime();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    YTPlayerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.ytPlayerService.addPlayer(this);
        this.domId = this.domId || this.videoId || 'ng-yt-player-' + this.ytPlayerService.playersCount;
    };
    /**
     * @return {?}
     */
    YTPlayerComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.ytPlayerService.apiReady.subscribe((/**
         * @param {?} ready
         * @return {?}
         */
        function (ready) {
            if (ready && !_this.player) {
                /** @type {?} */
                var parameters = typeof _this.parameters === 'string' ? parseQueryString(_this.parameters) : _this.parameters;
                _this.player = _this.initPlayer(_this.videoId, parameters, _this.domId);
            }
        }));
    };
    /**
     * @return {?}
     */
    YTPlayerComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.ytPlayerService.removePlayer(this);
    };
    /**
     * @return {?}
     */
    YTPlayerComponent.prototype.play = /**
     * @return {?}
     */
    function () {
        if (this.isReady) {
            this.player.playVideo();
        }
        else {
            console.warn('The player was not ready when tried to play.');
        }
    };
    /**
     * @return {?}
     */
    YTPlayerComponent.prototype.pause = /**
     * @return {?}
     */
    function () {
        if (this.isReady) {
            this.player.pauseVideo();
        }
        else {
            console.warn('The player was not ready when tried to pause.');
        }
    };
    /**
     * @param {?} videoId
     * @param {?=} startSeconds
     * @return {?}
     */
    YTPlayerComponent.prototype.cueVideoById = /**
     * @param {?} videoId
     * @param {?=} startSeconds
     * @return {?}
     */
    function (videoId, startSeconds) {
        if (this.isReady) {
            this.player.cueVideoById(videoId, startSeconds);
        }
        else {
            console.warn('The player was not ready when tried to cueVideoById.');
        }
    };
    /**
     * @param {?} videoId
     * @param {?=} startSeconds
     * @return {?}
     */
    YTPlayerComponent.prototype.loadVideoById = /**
     * @param {?} videoId
     * @param {?=} startSeconds
     * @return {?}
     */
    function (videoId, startSeconds) {
        if (this.isReady) {
            this.player.loadVideoById(videoId, startSeconds);
        }
        else {
            console.warn('The player was not ready when tried to loadVideoById.');
        }
    };
    /**
     * @private
     * @return {?}
     */
    YTPlayerComponent.prototype.onplay = /**
     * @private
     * @return {?}
     */
    function () {
        this.playing.emit();
        this.ytPlayerService.pauseAllExcept(this);
    };
    /**
     * @private
     * @param {?} videoId
     * @param {?} playerVars
     * @param {?} domId
     * @return {?}
     */
    YTPlayerComponent.prototype.initPlayer = /**
     * @private
     * @param {?} videoId
     * @param {?} playerVars
     * @param {?} domId
     * @return {?}
     */
    function (videoId, playerVars, domId) {
        var _this = this;
        /** @type {?} */
        var onReady = (/**
         * @return {?}
         */
        function () {
            if (!_this.isReady) {
                _this.ready.emit();
                _this.isReady = true;
            }
        });
        /** @type {?} */
        var onStateChange = (/**
         * @param {?} __0
         * @return {?}
         */
        function (_a) {
            var data = _a.data;
            switch (data) {
                case -1 /* UNSTARTED */:
                    _this.unstarted.emit();
                    break;
                case 0 /* ENDED */:
                    _this.ended.emit();
                    break;
                case 1 /* PLAYING */:
                    _this.onplay();
                    break;
                case 2 /* PAUSED */:
                    _this.paused.emit();
                    break;
                case 3 /* BUFFERING */:
                    _this.buffering.emit();
                    break;
                case 5 /* CUED */:
                    _this.cued.emit();
                    break;
            }
        });
        return new YT.Player(domId, {
            videoId: videoId,
            playerVars: playerVars,
            events: { onReady: onReady, onStateChange: onStateChange }
        });
    };
    YTPlayerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-ytplayer',
                    template: '<div [id]="domId"></div>',
                    styles: [':host, :host ::ng-deep iframe { display: block; width: 100%; height: 100%; }']
                }] }
    ];
    /** @nocollapse */
    YTPlayerComponent.ctorParameters = function () { return [
        { type: YTPlayerService }
    ]; };
    YTPlayerComponent.propDecorators = {
        videoId: [{ type: Input }],
        domId: [{ type: Input }],
        parameters: [{ type: Input }],
        ready: [{ type: Output }],
        unstarted: [{ type: Output }],
        ended: [{ type: Output }],
        playing: [{ type: Output }],
        paused: [{ type: Output }],
        buffering: [{ type: Output }],
        cued: [{ type: Output }]
    };
    return YTPlayerComponent;
}());
export { YTPlayerComponent };
if (false) {
    /** @type {?} */
    YTPlayerComponent.prototype.videoId;
    /** @type {?} */
    YTPlayerComponent.prototype.domId;
    /** @type {?} */
    YTPlayerComponent.prototype.parameters;
    /** @type {?} */
    YTPlayerComponent.prototype.ready;
    /** @type {?} */
    YTPlayerComponent.prototype.unstarted;
    /** @type {?} */
    YTPlayerComponent.prototype.ended;
    /** @type {?} */
    YTPlayerComponent.prototype.playing;
    /** @type {?} */
    YTPlayerComponent.prototype.paused;
    /** @type {?} */
    YTPlayerComponent.prototype.buffering;
    /** @type {?} */
    YTPlayerComponent.prototype.cued;
    /**
     * @type {?}
     * @private
     */
    YTPlayerComponent.prototype.player;
    /**
     * @type {?}
     * @private
     */
    YTPlayerComponent.prototype.isReady;
    /**
     * @type {?}
     * @private
     */
    YTPlayerComponent.prototype.ytPlayerService;
}
//# sourceMappingURL=data:application/json;base64,