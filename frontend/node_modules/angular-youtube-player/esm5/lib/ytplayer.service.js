/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { YTPlayerConfig } from './ytplayer.config';
import { loadAPI } from './util';
import * as i0 from "@angular/core";
import * as i1 from "./ytplayer.config";
var YTPlayerService = /** @class */ (function () {
    function YTPlayerService(config) {
        var _this = this;
        this.config = config;
        this.apiReady = new BehaviorSubject(window['YT'] !== undefined);
        this.players = new Array();
        this.multiplePlaying = config.multiplePlaying;
        if (config.shouldLoadAPI !== false) {
            loadAPI().then((/**
             * @return {?}
             */
            function () { return _this.apiReady.next(true); }));
        }
        else if (this.apiReady.value === false) {
            console.warn('YT API not loaded');
        }
    }
    Object.defineProperty(YTPlayerService.prototype, "playersCount", {
        get: /**
         * @return {?}
         */
        function () {
            return this.players.length;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} player
     * @return {?}
     */
    YTPlayerService.prototype.addPlayer = /**
     * @param {?} player
     * @return {?}
     */
    function (player) {
        this.players.push(player);
    };
    /**
     * @param {?} player
     * @return {?}
     */
    YTPlayerService.prototype.removePlayer = /**
     * @param {?} player
     * @return {?}
     */
    function (player) {
        /** @type {?} */
        var index = this.players.indexOf(player);
        this.players.splice(index, 1);
    };
    /**
     * @param {?} playerComponent
     * @return {?}
     */
    YTPlayerService.prototype.pauseAllExcept = /**
     * @param {?} playerComponent
     * @return {?}
     */
    function (playerComponent) {
        if (this.multiplePlaying) {
            return;
        }
        /** @type {?} */
        var exception = this.players.indexOf(playerComponent);
        if (exception > -1) {
            this.players.forEach((/**
             * @param {?} player
             * @param {?} index
             * @return {?}
             */
            function (player, index) {
                if (exception !== index) {
                    player.pause();
                }
            }));
        }
    };
    YTPlayerService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    YTPlayerService.ctorParameters = function () { return [
        { type: YTPlayerConfig }
    ]; };
    /** @nocollapse */ YTPlayerService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function YTPlayerService_Factory() { return new YTPlayerService(i0.ɵɵinject(i1.YTPlayerConfig)); }, token: YTPlayerService, providedIn: "root" });
    return YTPlayerService;
}());
export { YTPlayerService };
if (false) {
    /** @type {?} */
    YTPlayerService.prototype.apiReady;
    /**
     * @type {?}
     * @private
     */
    YTPlayerService.prototype.players;
    /**
     * @type {?}
     * @private
     */
    YTPlayerService.prototype.multiplePlaying;
    /**
     * @type {?}
     * @private
     */
    YTPlayerService.prototype.config;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieXRwbGF5ZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXIteW91dHViZS1wbGF5ZXIvIiwic291cmNlcyI6WyJsaWIveXRwbGF5ZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBVSxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBR3ZDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNuRCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sUUFBUSxDQUFDOzs7QUFFakM7SUFhRSx5QkFBb0IsTUFBc0I7UUFBMUMsaUJBUUM7UUFSbUIsV0FBTSxHQUFOLE1BQU0sQ0FBZ0I7UUFMbkMsYUFBUSxHQUFHLElBQUksZUFBZSxDQUFVLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxTQUFTLENBQUMsQ0FBQztRQUVuRSxZQUFPLEdBQUcsSUFBSSxLQUFLLEVBQXFCLENBQUM7UUFJL0MsSUFBSSxDQUFDLGVBQWUsR0FBRyxNQUFNLENBQUMsZUFBZSxDQUFDO1FBRTlDLElBQUksTUFBTSxDQUFDLGFBQWEsS0FBSyxLQUFLLEVBQUU7WUFDbEMsT0FBTyxFQUFFLENBQUMsSUFBSTs7O1lBQUMsY0FBTSxPQUFBLEtBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUF4QixDQUF3QixFQUFDLENBQUM7U0FDaEQ7YUFBTSxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxLQUFLLEtBQUssRUFBRTtZQUN4QyxPQUFPLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLENBQUM7U0FDbkM7SUFDSCxDQUFDO0lBakJELHNCQUFXLHlDQUFZOzs7O1FBQXZCO1lBQ0UsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQztRQUM3QixDQUFDOzs7T0FBQTs7Ozs7SUFpQk0sbUNBQVM7Ozs7SUFBaEIsVUFBaUIsTUFBeUI7UUFDeEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUIsQ0FBQzs7Ozs7SUFFTSxzQ0FBWTs7OztJQUFuQixVQUFvQixNQUF5Qjs7WUFDckMsS0FBSyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQztRQUMxQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDaEMsQ0FBQzs7Ozs7SUFFTSx3Q0FBYzs7OztJQUFyQixVQUFzQixlQUFrQztRQUN0RCxJQUFJLElBQUksQ0FBQyxlQUFlLEVBQUU7WUFDeEIsT0FBTztTQUNSOztZQUVLLFNBQVMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUM7UUFDdkQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDLEVBQUU7WUFDbEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPOzs7OztZQUFDLFVBQUMsTUFBTSxFQUFFLEtBQUs7Z0JBQ2pDLElBQUksU0FBUyxLQUFLLEtBQUssRUFBRTtvQkFDdkIsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDO2lCQUNoQjtZQUNILENBQUMsRUFBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDOztnQkE3Q0YsVUFBVSxTQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQjs7OztnQkFMUSxjQUFjOzs7MEJBSnZCO0NBcURDLEFBOUNELElBOENDO1NBM0NZLGVBQWU7OztJQUsxQixtQ0FBMkU7Ozs7O0lBRTNFLGtDQUFpRDs7Ozs7SUFDakQsMENBQWlDOzs7OztJQUVyQixpQ0FBOEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBZVFBsYXllckNvbXBvbmVudCB9IGZyb20gJy4veXRwbGF5ZXIuY29tcG9uZW50JztcbmltcG9ydCB7IFlUUGxheWVyQ29uZmlnIH0gZnJvbSAnLi95dHBsYXllci5jb25maWcnO1xuaW1wb3J0IHsgbG9hZEFQSSB9IGZyb20gJy4vdXRpbCc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIFlUUGxheWVyU2VydmljZSB7XG4gIHB1YmxpYyBnZXQgcGxheWVyc0NvdW50KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMucGxheWVycy5sZW5ndGg7XG4gIH1cblxuICBwdWJsaWMgYXBpUmVhZHkgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PGJvb2xlYW4+KHdpbmRvd1snWVQnXSAhPT0gdW5kZWZpbmVkKTtcblxuICBwcml2YXRlIHBsYXllcnMgPSBuZXcgQXJyYXk8WVRQbGF5ZXJDb21wb25lbnQ+KCk7XG4gIHByaXZhdGUgbXVsdGlwbGVQbGF5aW5nOiBib29sZWFuO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgY29uZmlnOiBZVFBsYXllckNvbmZpZykge1xuICAgIHRoaXMubXVsdGlwbGVQbGF5aW5nID0gY29uZmlnLm11bHRpcGxlUGxheWluZztcblxuICAgIGlmIChjb25maWcuc2hvdWxkTG9hZEFQSSAhPT0gZmFsc2UpIHtcbiAgICAgIGxvYWRBUEkoKS50aGVuKCgpID0+IHRoaXMuYXBpUmVhZHkubmV4dCh0cnVlKSk7XG4gICAgfSBlbHNlIGlmICh0aGlzLmFwaVJlYWR5LnZhbHVlID09PSBmYWxzZSkge1xuICAgICAgY29uc29sZS53YXJuKCdZVCBBUEkgbm90IGxvYWRlZCcpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBhZGRQbGF5ZXIocGxheWVyOiBZVFBsYXllckNvbXBvbmVudCkge1xuICAgIHRoaXMucGxheWVycy5wdXNoKHBsYXllcik7XG4gIH1cblxuICBwdWJsaWMgcmVtb3ZlUGxheWVyKHBsYXllcjogWVRQbGF5ZXJDb21wb25lbnQpIHtcbiAgICBjb25zdCBpbmRleCA9IHRoaXMucGxheWVycy5pbmRleE9mKHBsYXllcik7XG4gICAgdGhpcy5wbGF5ZXJzLnNwbGljZShpbmRleCwgMSk7XG4gIH1cblxuICBwdWJsaWMgcGF1c2VBbGxFeGNlcHQocGxheWVyQ29tcG9uZW50OiBZVFBsYXllckNvbXBvbmVudCkge1xuICAgIGlmICh0aGlzLm11bHRpcGxlUGxheWluZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IHRoaXMucGxheWVycy5pbmRleE9mKHBsYXllckNvbXBvbmVudCk7XG4gICAgaWYgKGV4Y2VwdGlvbiA+IC0xKSB7XG4gICAgICB0aGlzLnBsYXllcnMuZm9yRWFjaCgocGxheWVyLCBpbmRleCkgPT4ge1xuICAgICAgICBpZiAoZXhjZXB0aW9uICE9PSBpbmRleCkge1xuICAgICAgICAgIHBsYXllci5wYXVzZSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==