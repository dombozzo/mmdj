{"version":3,"sources":["ng://angular-youtube-player/lib/ytplayer.config.ts","ng://angular-youtube-player/lib/util.ts","ng://angular-youtube-player/lib/ytplayer.service.ts","ng://angular-youtube-player/lib/ytplayer.component.ts","ng://angular-youtube-player/lib/ytplayer.module.ts"],"names":["YTPlayerConfig","shouldLoadAPI","multiplePlaying","defaultConfig","this","loadAPI","Promise","resolve","window","tag","document","createElement","src","firstScriptTag","getElementsByTagName","parentNode","insertBefore","YTPlayerService","config","_this","apiReady","BehaviorSubject","undefined","players","Array","then","next","value","console","warn","Object","defineProperty","prototype","length","addPlayer","player","push","removePlayer","index","indexOf","splice","pauseAllExcept","playerComponent","exception","forEach","pause","Injectable","args","providedIn","YTPlayerComponent","ytPlayerService","ready","EventEmitter","unstarted","ended","playing","paused","buffering","cued","getCurrentTime","ngOnInit","domId","videoId","playersCount","ngAfterViewInit","subscribe","parameters","string","test","parsed_1","split","query","pair","Error","parseQueryString","initPlayer","ngOnDestroy","play","isReady","playVideo","pauseVideo","cueVideoById","startSeconds","loadVideoById","onplay","emit","playerVars","YT","Player","events","onReady","onStateChange","_a","data","Component","selector","template","Input","Output","Éµ0","YTPlayerModule","NgModule","imports","declarations","providers","provide","useValue","exports"],"mappings":"oUAAA,IAAAA,EAAA,WAGE,SAAAA,EACSC,EACAC,QADA,IAAAD,IAAAA,EAAgBD,EAAeG,cAAcF,oBAC7C,IAAAC,IAAAA,EAAkBF,EAAeG,cAAcD,iBAD/CE,KAAAH,cAAAA,EACAG,KAAAF,gBAAAA,EAEX,OANSF,EAAAG,cAAgB,CAAEF,eAAe,EAAMC,iBAAiB,GAMjEF,EAPA,GCaA,SAAgBK,IACd,OAAO,IAAIC,QAAO,SAACC,GACjBC,OAAgC,wBAAID,MAC9BE,EAAMD,OAAOE,SAASC,cAAc,UAC1CF,EAAIG,IAAM,yCACJC,EAAiBL,OAAOE,SAASI,qBAAqB,UAAU,GACtED,EAAeE,WAAWC,aAAaP,EAAKI,KCnBhD,IAAAI,EAAA,WAoBE,SAAAA,EAAoBC,GAApB,IAAAC,EAAAf,KAAoBA,KAAAc,OAAAA,EALbd,KAAAgB,SAAW,IAAIC,EAAAA,qBAA0CC,IAAjBd,OAAW,IAElDJ,KAAAmB,QAAU,IAAIC,MAIpBpB,KAAKF,gBAAkBgB,EAAOhB,iBAED,IAAzBgB,EAAOjB,cACTI,IAAUoB,KAAI,WAAO,OAAAN,EAAKC,SAASM,MAAK,MACP,IAAxBtB,KAAKgB,SAASO,OACvBC,QAAQC,KAAK,4BAfjBC,OAAAC,eAAWd,EAAAe,UAAA,eAAY,KAAvB,WACE,OAAO5B,KAAKmB,QAAQU,wCAkBfhB,EAAAe,UAAAE,UAAP,SAAiBC,GACf/B,KAAKmB,QAAQa,KAAKD,IAGblB,EAAAe,UAAAK,aAAP,SAAoBF,OACZG,EAAQlC,KAAKmB,QAAQgB,QAAQJ,GACnC/B,KAAKmB,QAAQiB,OAAOF,EAAO,IAGtBrB,EAAAe,UAAAS,eAAP,SAAsBC,GACpB,IAAItC,KAAKF,gBAAT,KAIMyC,EAAYvC,KAAKmB,QAAQgB,QAAQG,GACnCC,GAAa,GACfvC,KAAKmB,QAAQqB,QAAO,SAAET,EAAQG,GACxBK,IAAcL,GAChBH,EAAOU,gCAzChBC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDAJLhD,2HAJT,GCAA,IAAAiD,EAAA,WAgCE,SAAAA,EAAoBC,GAAA9C,KAAA8C,gBAAAA,EAfV9C,KAAA+C,MAAQ,IAAIC,EAAAA,aACZhD,KAAAiD,UAAY,IAAID,EAAAA,aAChBhD,KAAAkD,MAAQ,IAAIF,EAAAA,aACZhD,KAAAmD,QAAU,IAAIH,EAAAA,aACdhD,KAAAoD,OAAS,IAAIJ,EAAAA,aACbhD,KAAAqD,UAAY,IAAIL,EAAAA,aAChBhD,KAAAsD,KAAO,IAAIN,EAAAA,aAsGvB,OApGEtB,OAAAC,eAAWkB,EAAAjB,UAAA,cAAW,KAAtB,WACE,OAAO5B,KAAK+B,OAAOwB,kDAQrBV,EAAAjB,UAAA4B,SAAA,WACExD,KAAK8C,gBAAgBhB,UAAU9B,MAC/BA,KAAKyD,MAAQzD,KAAKyD,OAASzD,KAAK0D,SAAW,gBAAkB1D,KAAK8C,gBAAgBa,cAGpFd,EAAAjB,UAAAgC,gBAAA,WAAA,IAAA7C,EAAAf,KACEA,KAAK8C,gBAAgB9B,SAAS6C,UAAS,SAACd,GACtC,GAAIA,IAAUhC,EAAKgB,OAAQ,KACnB+B,EAAuD,iBAApB/C,EAAK+C,WF1CtD,SAAiCC,GAC/B,GAAI,+BAA+BC,KAAKD,GAAS,KACzCE,EAAS,GAKf,OAJAF,EAAOG,MAAM,KAAK1B,QAAO,SAAC2B,OAClBC,EAAOD,EAAMD,MAAM,KACzBD,EAAOG,EAAK,IAAMA,EAAK,KAElBH,EAEP,MAAM,IAAII,MAAM,8FEiC4DC,CAAiBvD,EAAK+C,YAAc/C,EAAK+C,WACjH/C,EAAKgB,OAAShB,EAAKwD,WAAWxD,EAAK2C,QAASI,EAAY/C,EAAK0C,WAKnEZ,EAAAjB,UAAA4C,YAAA,WACExE,KAAK8C,gBAAgBb,aAAajC,OAG7B6C,EAAAjB,UAAA6C,KAAP,WACMzE,KAAK0E,QACP1E,KAAK+B,OAAO4C,YAEZnD,QAAQC,KAAK,iDAIVoB,EAAAjB,UAAAa,MAAP,WACMzC,KAAK0E,QACP1E,KAAK+B,OAAO6C,aAEZpD,QAAQC,KAAK,kDAIVoB,EAAAjB,UAAAiD,aAAP,SAAoBnB,EAAiBoB,GAC/B9E,KAAK0E,QACP1E,KAAK+B,OAAO8C,aAAanB,EAASoB,GAElCtD,QAAQC,KAAK,yDAIVoB,EAAAjB,UAAAmD,cAAP,SAAqBrB,EAAiBoB,GAChC9E,KAAK0E,QACP1E,KAAK+B,OAAOgD,cAAcrB,EAASoB,GAEnCtD,QAAQC,KAAK,0DAIToB,EAAAjB,UAAAoD,OAAR,WACEhF,KAAKmD,QAAQ8B,OACbjF,KAAK8C,gBAAgBT,eAAerC,OAG9B6C,EAAAjB,UAAA2C,WAAR,SAAmBb,EAAiBwB,EAA2BzB,GAA/D,IAAA1C,EAAAf,KA8BE,OAAO,IAAImF,GAAGC,OAAO3B,EAAO,CAC1BC,QAAOA,EACPwB,WAAUA,EACVG,OAAQ,CAAEC,QAhCC,WACNvE,EAAK2D,UACR3D,EAAKgC,MAAMkC,OACXlE,EAAK2D,SAAU,IA6BEa,cA1BF,SAAIC,GACrB,OADuBA,EAAAC,MAErB,KAAA,EACE1E,EAAKkC,UAAUgC,OACf,MACF,KAAA,EACElE,EAAKmC,MAAM+B,OACX,MACF,KAAA,EACElE,EAAKiE,SACL,MACF,KAAA,EACEjE,EAAKqC,OAAO6B,OACZ,MACF,KAAA,EACElE,EAAKsC,UAAU4B,OACf,MACF,KAAA,EACElE,EAAKuC,KAAK2B,iCA3GnBS,EAAAA,UAAS/C,KAAA,CAAC,CACTgD,SAAU,eACVC,SAAU,mCACD,6HANF/E,sCASNgF,EAAAA,qBACAA,EAAAA,0BACAA,EAAAA,qBAEAC,EAAAA,0BACAA,EAAAA,sBACAA,EAAAA,wBACAA,EAAAA,uBACAA,EAAAA,0BACAA,EAAAA,qBACAA,EAAAA,UAsGHjD,EA7HA,GCAA,IAAAkD,EASmDnG,EAAeG,cAJlEiG,EAAA,WAAA,SAAAA,KAO8B,2BAP7BC,EAAAA,SAAQtD,KAAA,CAAC,CACRuD,QAAS,GAETC,aAAc,CAACtD,GACfuD,UAAW,CAAC,CAAEC,QAASzG,EAAgB0G,SAAQP,IAC/CQ,QAAS,CAAC1D,OAEkBmD,EAP9B","sourcesContent":["export class YTPlayerConfig {\n  static defaultConfig = { shouldLoadAPI: true, multiplePlaying: false };\n\n  constructor(\n    public shouldLoadAPI = YTPlayerConfig.defaultConfig.shouldLoadAPI,\n    public multiplePlaying = YTPlayerConfig.defaultConfig.multiplePlaying\n  ) {}\n}\n","export function parseQueryString(string: string): any {\n  if (/(?:[\\w_]+=(?:[\\w\\d]+|\\d)&?)+/.test(string)) {\n    const parsed = {};\n    string.split('&').forEach(query => {\n      const pair = query.split('=');\n      parsed[pair[0]] = pair[1];\n    });\n    return parsed;\n  } else {\n    throw new Error('Bad string format, please refer to https://developers.google.com/youtube/player_parameters');\n  }\n}\n\nexport function loadAPI() {\n  return new Promise(resolve => {\n    window['onYouTubeIframeAPIReady'] = resolve;\n    const tag = window.document.createElement('script');\n    tag.src = 'https://www.youtube.com/iframe_api';\n    const firstScriptTag = window.document.getElementsByTagName('script')[0];\n    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n  });\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\nimport { YTPlayerComponent } from './ytplayer.component';\nimport { YTPlayerConfig } from './ytplayer.config';\nimport { loadAPI } from './util';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class YTPlayerService {\n  public get playersCount(): number {\n    return this.players.length;\n  }\n\n  public apiReady = new BehaviorSubject<boolean>(window['YT'] !== undefined);\n\n  private players = new Array<YTPlayerComponent>();\n  private multiplePlaying: boolean;\n\n  constructor(private config: YTPlayerConfig) {\n    this.multiplePlaying = config.multiplePlaying;\n\n    if (config.shouldLoadAPI !== false) {\n      loadAPI().then(() => this.apiReady.next(true));\n    } else if (this.apiReady.value === false) {\n      console.warn('YT API not loaded');\n    }\n  }\n\n  public addPlayer(player: YTPlayerComponent) {\n    this.players.push(player);\n  }\n\n  public removePlayer(player: YTPlayerComponent) {\n    const index = this.players.indexOf(player);\n    this.players.splice(index, 1);\n  }\n\n  public pauseAllExcept(playerComponent: YTPlayerComponent) {\n    if (this.multiplePlaying) {\n      return;\n    }\n\n    const exception = this.players.indexOf(playerComponent);\n    if (exception > -1) {\n      this.players.forEach((player, index) => {\n        if (exception !== index) {\n          player.pause();\n        }\n      });\n    }\n  }\n}\n","/// <reference types=\"youtube\"/>\n\nimport { Component, OnInit, AfterViewInit, OnDestroy, Input, Output, EventEmitter } from '@angular/core';\n\nimport { YTPlayerService } from './ytplayer.service';\nimport { parseQueryString } from './util';\n\n@Component({\n  selector: 'lib-ytplayer',\n  template: '<div [id]=\"domId\"></div>',\n  styles: [':host, :host ::ng-deep iframe { display: block; width: 100%; height: 100%; }']\n})\nexport class YTPlayerComponent implements OnInit, AfterViewInit, OnDestroy {\n  @Input() videoId: string;\n  @Input() domId: string;\n  @Input() parameters: string | YT.PlayerVars;\n\n  @Output() ready = new EventEmitter();\n  @Output() unstarted = new EventEmitter();\n  @Output() ended = new EventEmitter();\n  @Output() playing = new EventEmitter();\n  @Output() paused = new EventEmitter();\n  @Output() buffering = new EventEmitter();\n  @Output() cued = new EventEmitter();\n\n  public get currentTime(): number {\n    return this.player.getCurrentTime();\n  }\n\n  private player: YT.Player;\n  private isReady: boolean;\n\n  constructor(private ytPlayerService: YTPlayerService) {}\n\n  ngOnInit() {\n    this.ytPlayerService.addPlayer(this);\n    this.domId = this.domId || this.videoId || 'ng-yt-player-' + this.ytPlayerService.playersCount;\n  }\n\n  ngAfterViewInit() {\n    this.ytPlayerService.apiReady.subscribe(ready => {\n      if (ready && !this.player) {\n        const parameters: YT.PlayerVars = typeof this.parameters === 'string' ? parseQueryString(this.parameters) : this.parameters;\n        this.player = this.initPlayer(this.videoId, parameters, this.domId);\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this.ytPlayerService.removePlayer(this);\n  }\n\n  public play() {\n    if (this.isReady) {\n      this.player.playVideo();\n    } else {\n      console.warn('The player was not ready when tried to play.');\n    }\n  }\n\n  public pause() {\n    if (this.isReady) {\n      this.player.pauseVideo();\n    } else {\n      console.warn('The player was not ready when tried to pause.');\n    }\n  }\n\n  public cueVideoById(videoId: string, startSeconds?: number) {\n    if (this.isReady) {\n      this.player.cueVideoById(videoId, startSeconds);\n    } else {\n      console.warn('The player was not ready when tried to cueVideoById.');\n    }\n  }\n\n  public loadVideoById(videoId: string, startSeconds?: number) {\n    if (this.isReady) {\n      this.player.loadVideoById(videoId, startSeconds);\n    } else {\n      console.warn('The player was not ready when tried to loadVideoById.');\n    }\n  }\n\n  private onplay() {\n    this.playing.emit();\n    this.ytPlayerService.pauseAllExcept(this);\n  }\n\n  private initPlayer(videoId: string, playerVars: YT.PlayerVars, domId: string) {\n    const onReady = () => {\n      if (!this.isReady) {\n        this.ready.emit();\n        this.isReady = true;\n      }\n    };\n    const onStateChange = ({ data }) => {\n      switch (data) {\n        case YT.PlayerState.UNSTARTED:\n          this.unstarted.emit();\n          break;\n        case YT.PlayerState.ENDED:\n          this.ended.emit();\n          break;\n        case YT.PlayerState.PLAYING:\n          this.onplay();\n          break;\n        case YT.PlayerState.PAUSED:\n          this.paused.emit();\n          break;\n        case YT.PlayerState.BUFFERING:\n          this.buffering.emit();\n          break;\n        case YT.PlayerState.CUED:\n          this.cued.emit();\n          break;\n      }\n    };\n\n    return new YT.Player(domId, {\n      videoId,\n      playerVars,\n      events: { onReady, onStateChange }\n    });\n  }\n}\n","import { NgModule } from '@angular/core';\n\nimport { YTPlayerComponent } from './ytplayer.component';\nimport { YTPlayerConfig } from './ytplayer.config';\n\n@NgModule({\n  imports: [\n  ],\n  declarations: [YTPlayerComponent],\n  providers: [{ provide: YTPlayerConfig, useValue: YTPlayerConfig.defaultConfig }],\n  exports: [YTPlayerComponent]\n})\nexport class YTPlayerModule { }\n"]}